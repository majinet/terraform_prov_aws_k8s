name: Provisioning Kubernetes

on:
  workflow_dispatch:

jobs:
  setup_k8s_binary_in_control_plane:
    runs-on: ubuntu-latest
    environment: development

    steps:
      - uses: actions/checkout@v3
      - name: Pre-setup container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.AWS_EC2_CONTROL_PLANE_IP }}
          username: ${{ vars.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
            overlay
              br_netfilter
            EOF

            sudo modprobe overlay
            sudo modprobe br_netfilter

            # sysctl params required by setup, params persist across reboots
            cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
              net.bridge.bridge-nf-call-iptables  = 1
              net.bridge.bridge-nf-call-ip6tables = 1
              net.ipv4.ip_forward                 = 1
            EOF

            # Apply sysctl params without reboot
            sudo sysctl --system

      - name: Disable swap
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.AWS_EC2_CONTROL_PLANE_IP }}
          username: ${{ vars.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            sudo swapoff -a
            (crontab -l 2>/dev/null; echo "@reboot /sbin/swapoff -a") | crontab - || true

      - name: Setup container runtime
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.AWS_EC2_CONTROL_PLANE_IP }}
          username: ${{ vars.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            wget -q -O containerd-1.6.18-linux-amd64.tar.gz https://github.com/containerd/containerd/releases/download/v1.6.18/containerd-1.6.18-linux-amd64.tar.gz
            sudo tar Cxzvf /usr/local containerd-1.6.18-linux-amd64.tar.gz
            
            wget -q -O containerd.service https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
            sudo mv containerd.service /etc/systemd/system/containerd.service
            
            sudo systemctl daemon-reload
            sudo systemctl enable --now containerd

      - name: Setup runc
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.AWS_EC2_CONTROL_PLANE_IP }}
          username: ${{ vars.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            wget -q -O runc.amd64 https://github.com/opencontainers/runc/releases/download/v1.1.4/runc.amd64
            sudo install -m 755 runc.amd64 /usr/local/sbin/runc

      - name: Setup cni plugin
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.AWS_EC2_CONTROL_PLANE_IP }}
          username: ${{ vars.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            sudo mkdir -p /opt/cni/bin
            sudo chmod -R 755 /opt/cni/bin
            
            wget -q -O cni-plugins-linux-amd64-v1.2.0.tgz https://github.com/containernetworking/plugins/releases/download/v1.2.0/cni-plugins-linux-amd64-v1.2.0.tgz
            sudo tar Cxzvf /opt/cni/bin cni-plugins-linux-amd64-v1.2.0.tgz

      - name: Create config.toml
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.AWS_EC2_CONTROL_PLANE_IP }}
          username: ${{ vars.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            sudo mkdir -p /etc/containerd
            sudo chmod -R 777 /etc/containerd
            sudo containerd config default > /etc/containerd/config.toml

      - name: deploy file via ssh
        uses: wlixcc/SFTP-Deploy-Action@v1.2.4
        with:
          username: ${{ vars.AWS_EC2_USERNAME }}
          server: ${{ vars.AWS_EC2_CONTROL_PLANE_IP }}
          ssh_private_key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          local_path: 'containerd/config/config.toml'
          remote_path: '/etc/containerd'
          sftpArgs: '-o ConnectTimeout=5'

      - name: apply the changes and restart containerd
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.AWS_EC2_CONTROL_PLANE_IP }}
          username: ${{ vars.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            sudo systemctl restart containerd

      - name: install kubeadm, kubelet, and kubectl
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.AWS_EC2_CONTROL_PLANE_IP }}
          username: ${{ vars.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections
            sudo apt-get update
            sudo apt-get install -y -q apt-transport-https ca-certificates curl
            sudo curl -fsSLo /etc/apt/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
            echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
            sudo apt-get update
            sudo apt-get install -y -q kubelet kubeadm kubectl
            sudo apt-mark hold kubelet kubeadm kubectl
      

  setup_k8s_binary_in_worker_node:
    runs-on: ubuntu-latest
    environment: development

    steps:
      - uses: actions/checkout@v3
      - name: Pre-setup container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.AWS_EC2_WORKER_NODE_1_IP }}
          username: ${{ vars.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
            overlay
              br_netfilter
            EOF

            sudo modprobe overlay
            sudo modprobe br_netfilter

            # sysctl params required by setup, params persist across reboots
            cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
              net.bridge.bridge-nf-call-iptables  = 1
              net.bridge.bridge-nf-call-ip6tables = 1
              net.ipv4.ip_forward                 = 1
            EOF

            # Apply sysctl params without reboot
            sudo sysctl --system

      - name: Disable swap
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.AWS_EC2_CONTROL_PLANE_IP }}
          username: ${{ vars.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            sudo swapoff -a
            (crontab -l 2>/dev/null; echo "@reboot /sbin/swapoff -a") | crontab - || true

      - name: Setup container runtime
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.AWS_EC2_WORKER_NODE_1_IP }}
          username: ${{ vars.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            wget -q -O containerd-1.6.18-linux-amd64.tar.gz https://github.com/containerd/containerd/releases/download/v1.6.18/containerd-1.6.18-linux-amd64.tar.gz
            sudo tar Cxzvf /usr/local containerd-1.6.18-linux-amd64.tar.gz
            
            wget -q -O containerd.service https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
            sudo mv containerd.service /etc/systemd/system/containerd.service
            
            sudo systemctl daemon-reload
            sudo systemctl enable --now containerd

      - name: Setup runc
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.AWS_EC2_WORKER_NODE_1_IP }}
          username: ${{ vars.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            wget -q -O runc.amd64 https://github.com/opencontainers/runc/releases/download/v1.1.4/runc.amd64
            sudo install -m 755 runc.amd64 /usr/local/sbin/runc

      - name: Setup cni plugin
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.AWS_EC2_WORKER_NODE_1_IP }}
          username: ${{ vars.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            sudo mkdir -p /opt/cni/bin
            sudo chmod -R 755 /opt/cni/bin
            
            wget -q -O cni-plugins-linux-amd64-v1.2.0.tgz https://github.com/containernetworking/plugins/releases/download/v1.2.0/cni-plugins-linux-amd64-v1.2.0.tgz
            sudo tar Cxzvf /opt/cni/bin cni-plugins-linux-amd64-v1.2.0.tgz

      - name: Create config.toml
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.AWS_EC2_WORKER_NODE_1_IP }}
          username: ${{ vars.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            sudo mkdir -p /etc/containerd
            sudo chmod -R 777 /etc/containerd
            sudo containerd config default > /etc/containerd/config.toml

      - name: deploy file via ssh
        uses: wlixcc/SFTP-Deploy-Action@v1.2.4
        with:
          username: ${{ vars.AWS_EC2_USERNAME }}
          server: ${{ vars.AWS_EC2_WORKER_NODE_1_IP }}
          ssh_private_key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          local_path: 'containerd/config/config.toml'
          remote_path: '/etc/containerd'
          sftpArgs: '-o ConnectTimeout=5'

      - name: apply the changes and restart containerd
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.AWS_EC2_WORKER_NODE_1_IP }}
          username: ${{ vars.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            sudo systemctl restart containerd

      - name: install kubeadm, kubelet, and kubectl
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.AWS_EC2_WORKER_NODE_1_IP }}
          username: ${{ vars.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections
            sudo apt-get update
            sudo apt-get install -y -q apt-transport-https ca-certificates curl
            sudo curl -fsSLo /etc/apt/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
            echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
            sudo apt-get update
            sudo apt-get install -y -q kubelet kubeadm kubectl
            sudo apt-mark hold kubelet kubeadm kubectl
