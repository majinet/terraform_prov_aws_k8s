name: setup Charmed kubeflow

on:
  workflow_dispatch:

jobs:
  setup_kubeflow:
    runs-on: ubuntu-latest
    environment: development

    steps:
      - uses: actions/checkout@v3
      - name: install juju and kubeflow
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.AWS_EC2_CONTROL_PLANE_IP }}
          username: ${{ vars.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            sudo snap install juju --classic
            juju bootstrap microk8s
            juju add-model kubeflow
            
            sudo sh -c 'echo 3 > /proc/sys/vm/drop_caches'
            
            juju deploy kubeflow --trust  --channel=1.7/stable

      - name: Sleep for 1500 seconds
        uses: whatnick/wait-action@master
        with:
          time: '1500s'

      - name: check running status
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.AWS_EC2_CONTROL_PLANE_IP }}
          username: ${{ vars.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            sudo sh -c 'echo 3 > /proc/sys/vm/drop_caches'
            kubectl wait --for=jsonpath='{.status.phase}'=Running --timeout=2400s pod --all -n kubeflow

      - name: configuration
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.AWS_EC2_CONTROL_PLANE_IP }}
          username: ${{ vars.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            microk8s enable metallb:10.64.140.43-10.64.140.49
            juju config dex-auth public-url=http://10.64.140.43.nip.io
            juju config oidc-gatekeeper public-url=http://10.64.140.43.nip.io
            juju config dex-auth static-username=admin
            juju config dex-auth static-password=admin
            
            juju run --unit istio-pilot/0 -- "export JUJU_DISPATCH_PATH=hooks/config-changed; ./dispatch"
            
            kubectl apply -f https://k8s.io/examples/admin/dns/dnsutils.yaml

      - name: configure Minio access
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.AWS_EC2_CONTROL_PLANE_IP }}
          username: ${{ vars.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            juju config minio access-key=minio
            juju config minio secret-key=minio1234
            kubectl apply -f microk8s/secrets/minio_secret.yaml
            kubectl apply -f microk8s/serviceaccounts/sa_minio_fullaccess_default.yaml
            
            # Create service account in Minio and change accesskey and secret key in Client api

      - name: create kubeflow pipeline app storage
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.AWS_EC2_CONTROL_PLANE_IP }}
          username: ${{ vars.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            kubectl apply -f microk8s/config/storage/pvc-kubeflow-pipeline-app.yaml
            kubectl apply -f microk8s/config/storage/pvc-kubeflow-pipeline-data.yaml

      - name: provisioning Feast Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.AWS_EC2_CONTROL_PLANE_IP }}
          username: ${{ vars.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            microk8s helm3 repo add feast-charts https://feast-helm-charts.storage.googleapis.com
            microk8s helm3 repo update
            #microk8s helm3 install feast-feature-server feast-charts/feast-feature-server --set feature_store_yaml_base64=$(base64 feature_store.yaml)
            microk8s helm3 install feast-feature-server feast-charts/feast-feature-server --set feature_store_yaml_base64="cHJvamVjdDogdGl0YW5pY19mZWF0dXJlCnByb3ZpZGVyOiBsb2NhbApyZWdpc3RyeToKICAgIHJlZ2lzdHJ5X3N0b3JlX3R5cGU6IFBvc3RncmVTUUxSZWdpc3RyeVN0b3JlCiAgICBwYXRoOiBmZWFzdF9yZWdpc3RyeQogICAgaG9zdDogcG9zdGdyZXNxbC5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsCiAgICBwb3J0OiA1NDMyCiAgICBkYXRhYmFzZTogZmVhc3QKICAgIGRiX3NjaGVtYTogcHVibGljCiAgICB1c2VyOiBmZWFzdAogICAgcGFzc3dvcmQ6IGZlYXN0Cm9ubGluZV9zdG9yZToKICAgIHR5cGU6IHJlZGlzCiAgICByZWRpc190eXBlOiByZWRpc19jbHVzdGVyCiAgICBjb25uZWN0aW9uX3N0cmluZzogInJlZGlzLW1hc3Rlci5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjYzNzksc3NsPWZhbHNlLHBhc3N3b3JkPWJ2ZWRGT2REY1kiCm9mZmxpbmVfc3RvcmU6CiAgICB0eXBlOiBwb3N0Z3JlcwogICAgaG9zdDogcG9zdGdyZXNxbC5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsCiAgICBwb3J0OiA1NDMyCiAgICBkYXRhYmFzZTogZmVhc3QKICAgIGRiX3NjaGVtYTogcHVibGljCiAgICB1c2VyOiBmZWFzdAogICAgcGFzc3dvcmQ6IGZlYXN0CmVudGl0eV9rZXlfc2VyaWFsaXphdGlvbl92ZXJzaW9uOiAyCgo="
